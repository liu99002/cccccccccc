// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux4Way16.hdl

/**
 * 4-way 16-bit multiplexor:
 * out = a if sel == 00
 *       b if sel == 01
 *       c if sel == 10
 *       d if sel == 11
 */

CHIP Mux4Way16 {
    IN a[16], b[16], c[16], d[16], sel[2];
    OUT out[16];

    PARTS:
    // Put your code here:
    Mux(a=a[0],b=b[0],sel=sel[0],out=muxa0);
    Mux(a=c[0],b=d[0],sel=sel[0],out=muxb0);
    Mux(a=muxa0,b=muxb0,sel=sel[1],out=out[0]);

    Mux(a=a[1],b=b[1],sel=sel[0],out=muxa1);
    Mux(a=c[1],b=d[1],sel=sel[0],out=muxb1);
    Mux(a=muxa1,b=muxb1,sel=sel[1],out=out[1]);
    
    Mux(a=a[2],b=b[2],sel=sel[0],out=muxa2);
    Mux(a=c[2],b=d[2],sel=sel[0],out=muxb2);
    Mux(a=muxa2,b=muxb2,sel=sel[1],out=out[2]);
    
    Mux(a=a[3],b=b[3],sel=sel[0],out=muxa3);
    Mux(a=c[3],b=d[3],sel=sel[0],out=muxb3);
    Mux(a=muxa3,b=muxb3,sel=sel[1],out=out[3]);
    
    Mux(a=a[4],b=b[4],sel=sel[0],out=muxa4);
    Mux(a=c[4],b=d[4],sel=sel[0],out=muxb4);
    Mux(a=muxa4,b=muxb4,sel=sel[1],out=out[4]);
    
    Mux(a=a[5],b=b[5],sel=sel[0],out=muxa5);
    Mux(a=c[5],b=d[5],sel=sel[0],out=muxb5);
    Mux(a=muxa5,b=muxb5,sel=sel[1],out=out[5]);
    
    Mux(a=a[6],b=b[6],sel=sel[0],out=muxa6);
    Mux(a=c[6],b=d[6],sel=sel[0],out=muxb6);
    Mux(a=muxa6,b=muxb6,sel=sel[1],out=out[6]);
    
    Mux(a=a[7],b=b[7],sel=sel[0],out=muxa7);
    Mux(a=c[7],b=d[7],sel=sel[0],out=muxb7);
    Mux(a=muxa7,b=muxb7,sel=sel[1],out=out[7]);
    
    Mux(a=a[8],b=b[8],sel=sel[0],out=muxa8);
    Mux(a=c[8],b=d[8],sel=sel[0],out=muxb8);
    Mux(a=muxa8,b=muxb8,sel=sel[1],out=out[8]);
    
    Mux(a=a[9],b=b[9],sel=sel[0],out=muxa9);
    Mux(a=c[9],b=d[9],sel=sel[0],out=muxb9);
    Mux(a=muxa9,b=muxb9,sel=sel[1],out=out[9]);
    
    Mux(a=a[10],b=b[10],sel=sel[0],out=muxa10);
    Mux(a=c[10],b=d[10],sel=sel[0],out=muxb10);
    Mux(a=muxa10,b=muxb10,sel=sel[1],out=out[10]);
    
    Mux(a=a[11],b=b[11],sel=sel[0],out=muxa11);
    Mux(a=c[11],b=d[11],sel=sel[0],out=muxb11);
    Mux(a=muxa11,b=muxb11,sel=sel[1],out=out[11]);
    
    Mux(a=a[12],b=b[12],sel=sel[0],out=muxa12);
    Mux(a=c[12],b=d[12],sel=sel[0],out=muxb12);
    Mux(a=muxa12,b=muxb12,sel=sel[1],out=out[12]);
    
    Mux(a=a[13],b=b[13],sel=sel[0],out=muxa13);
    Mux(a=c[13],b=d[13],sel=sel[0],out=muxb13);
    Mux(a=muxa13,b=muxb13,sel=sel[1],out=out[13]);
    
    Mux(a=a[14],b=b[14],sel=sel[0],out=muxa14);
    Mux(a=c[14],b=d[14],sel=sel[0],out=muxb14);
    Mux(a=muxa14,b=muxb14,sel=sel[1],out=out[14]);
    
    Mux(a=a[15],b=b[15],sel=sel[0],out=muxa15);
    Mux(a=c[15],b=d[15],sel=sel[0],out=muxb15);
    Mux(a=muxa15,b=muxb15,sel=sel[1],out=out[15]);
    

    
}